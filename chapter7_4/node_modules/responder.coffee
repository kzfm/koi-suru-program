select_random = (l) -> l[Math.floor(Math.random()*l.length)]

gsub = (source, pattern, replacements) ->
  unless pattern? and replacements?
    return source

  result = ''
  while source.length > 0
    if (match = source.match(pattern))
      result += source.slice(0, match.index)
      result += replacements.shift()
      source = source.slice(match.index + match[0].length)
    else
      result += source
      source = ''
   result

class Responder
 constructor: (@name, @dictionary) ->
 response: (input) -> ''

exports.WhatResponder = class extends Responder
  response: (input, parts, mood) -> input + "ってなに？"

exports.RandomResponder = class extends Responder
  constructor: (@name, @dictionary) ->
    super @name, @dictionary
  response: (input, parts, mood) -> select_random(@dictionary.random)

exports.PatternResponder = class extends Responder
  constructor: (@name, @dictionary) ->
    super @name, @dictionary

  response: (input, parts, mood) ->
    for ptn in @dictionary.pattern
      m = ptn.pmatch(input)
      if m?
        resp = ptn.choice(mood)
        if resp isnt null
          res = resp.replace(/ptn['pattern']/, m[0])
          break
    res ?= select_random(@dictionary.random)

exports.TemplateResponder = class extends Responder
  response: (input, parts, mood) ->
    keywords = []
    for p in parts.word
      keywords.push p.surface if p.pos is '名詞'

    count = keywords.length

    if count > 0 and @dictionary.template[count]?
      template = select_random(@dictionary.template[count])
      gsub template, /%noun%/, keywords
    else
      select_random(@dictionary.random)