fs = require('fs');

exports.Dictionary = class Dictionary
  constructor: () ->
    random_list = []
    pattern_list = []
    fs.readFileSync('dics/random.txt').toString().split('\n').forEach(
      (line) ->
        if line != ''
          random_list.push(line)
    )
    fs.readFileSync('dics/pattern.txt').toString().split('\n').forEach(
      (line) ->
        words = line.split('\t')
        if words[0] != ''
          pattern_list.push(new PatternItem(words[0],words[1]))
    )
    @random  = random_list
    @pattern = pattern_list

  study: (input, parts) ->
    @study_random input
    @study_pattern input, parts

  study_random: (input) ->
    @random.push(input) if @random.indexOf(input) == -1

  study_pattern: (input, parts) ->
    return if not parts.word?
    for wo in parts.word
      duped = null
      for p in @pattern
        duped = p if p.pattern is wo.surface

      if duped
        duped.add_phrase(input)
      else
        @pattern.push( new PatternItem(wo.surface, input))

  save: ->
    fs.writeFileSync 'dics/random.txt', @random.join('\n')
    fs.writeFileSync 'dics/pattern.txt', @pattern.map((p) -> p.make_line()).join('\n')

exports.PatternItem = class PatternItem
  separator = /^((-?\d+)\#\#)?(.*)$/
  select_random: (l) -> l[Math.floor(Math.random()*l.length)]

  constructor: (pattern, phrase) ->
    p = pattern.match(separator)
    @modify = parseInt(p[2]) or 0
    @pattern = p[3]
    ps = []
    for ph in phrase.split('|')
      pp = ph.match(separator)
      ps.push({'need': parseInt(pp[2] or 0), 'phrase': pp[3]})
    @phrases = ps

  pmatch: (str) -> str.match(@pattern)

  choice: (mood) ->
    choices = []
    for p in @phrases
      if @issuitable(p['need'], mood)
        choices.push(p['phrase'])

    if choices.length == 0
      null
    else
      @select_random(choices)

  issuitable: (need, mood) ->
    if need == 0
      true
    else if need > 0
      mood > need
    else
      mood < need

  add_phrase: (phrase) ->
    nonexist_phrase = true
    for p in @phrases
      nonexist_phrase = false if p.phrase is phrase
    @phrases.push {need: 0, phrase: phrase} if nonexist_phrase

  make_line: ->
    pattern = "#{@modify}###{@pattern}"
    phrases = @phrases.map((p) -> "#{p.need}###{p.phrase}").join('|')
    pattern+ '\t' + phrases