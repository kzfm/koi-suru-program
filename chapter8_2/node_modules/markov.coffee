morph = require('morph')

# utils
select_random = (l) -> l[Math.floor(Math.random()*l.length)]

clone = (obj) ->
  if not obj? or typeof obj isnt 'object'
    return obj

  newInstance = new obj.constructor()

  for key of obj
    newInstance[key] = clone obj[key]

  return newInstance

exports.Markov = class Markov
  ENDMARK = '%END%'
  CHAIN_MAX = 30

  constructor: ->
    @dic = {}
    @starts = {}

  add_sentence: (parts) ->
    return if parts.word.length < 3
    parts = clone parts
    words = parts.word
    prefix1 = words.shift().surface
    prefix2 = words.shift().surface
    @add_start prefix1

    for word in words
      suffix = word.surface
      @add_suffix prefix1, prefix2, suffix
      prefix1 = prefix2
      prefix2 = suffix

    @add_suffix prefix1, prefix2, ENDMARK

  generate: (keyword) ->

  load: (f) ->

  save: (f) ->

  add_suffix: (prefix1, prefix2, suffix) ->
    @dic[prefix1] = {} unless @dic[prefix1]?
    @dic[prefix1][prefix2] = [] unless @dic[prefix1][prefix2]?
    @dic[prefix1][prefix2].push suffix

  add_start: (prefix1) ->
    @starts[prefix1] = 0 unless @starts[prefix1]?
    @starts[prefix1] += 1

  select_start: ->
    select_random key for key of @starts